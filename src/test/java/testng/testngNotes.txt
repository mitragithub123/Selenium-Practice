TestNG - Java-based Unit Testing Tool
======================================
TestNG is widely preferred over JUnit in Selenium-based test automation frameworks due to several advantages.

Advantages of TestNG Over JUnit:
----------------------------------
Parallel testing: Native support in TestNG, difficult in JUnit.
Data-driven tests: @DataProvider in TestNG, more flexible than JUnit.
Dependencies: TestNG allows method dependencies; JUnit does not.
Test grouping: TestNG allows test groups, making it easier to organize and run selective tests. JUnit does not provide built-in support for grouping test cases.
Configuration: TestNG provides flexible test execution through XML files. JUnit requires external tools or more complex configurations for achieving similar flexibility.

Key Features of TestNG:
---------------------------
Creation of test cases and test suites.
Grouping test cases.
Prioritizing test case execution.
Parameterization (passing arguments at runtime).
Detailed reporting.

Installation:
-------------------
Install the TestNG plugin from the Eclipse Marketplace and restart the IDE.
Add the TestNG dependency to the pom.xml file for Maven projects, or right-click on the project, go to Build Path > Add Libraries > Select TestNG.

@Test Method in TestNG:
----------------------------
TestNG executes @Test methods in alphabetical order by default (e.g., TC01.java).
The execution order can be controlled using @Test(priority=number) (e.g., TC02.java).
Priorities can be assigned with any number (not necessarily consecutive). (e.g., TC03.java).
If no priority is assigned, the default priority is 0. (e.g., TC04.java).
If multiple test methods have the same priority, they are executed in alphabetical order. (e.g., TC05.java).
Negative priority values are also allowed. (e.g., TC06.java).
TestNG execute test methods, if they have @Test annotations. (e.g., TC07.java).



Test suite>>Test cases>>Test steps (Manual)
XML file>>Classes>>Methods (Automation)


TestNG Annotations
--------------------
@Test-Test method execution

@BeforeMethod-Runs before each test method.
@AfterMethod-Runs after each test method.

@BeforeClass-Runs once before any test methods in the current class.
@AfterClass- Runs once after all the test methods in the current class are executed.

@BeforeTest-Runs before any test methods that are in the <test> tag in TestNG XML.
@AfterTest-Runs after all the test methods in the <test> tag are executed.

@BeforeSuite-Executes before any tests in the <suite> tag are run.
@AfterSuite-Executes after all tests in the <suite> tag have completed.

Assertions
------------
Validation points
If statements can not make a test method fail, that is why we use assertion.

2 types
Hard assertion (assertEquals(), assertNotEquals(), assertTrue(), assertFalse() etc.)
Soft assertion


When a hard assertion fails, it immediately stops the execution of the test method. Any code following the failed assertion will not be executed, as the test is considered failed at that point.

Soft Assertions allow the test to continue execution even after a failed assertion.
Hard Assertions stop execution immediately if they fail, skipping any remaining code in the test method.
assertAll() is used at the end of a soft assertion test to collect and report any failures that occurred.

public class AssertionHardVsSoft {
	@Test(priority = 1)
	public void testHardAssertion() {
		System.out.println("Testing");
		System.out.println("Testing");

		// Hard assertion
		Assert.assertEquals(1, 2); // If this statement fails here, it will not execute further lines.
		// So we use soft assertions in this case.

		System.out.println("Testing");
		System.out.println("Testing");
	}

	@Test(priority = 2)
	public void testSoftAssertion() {
		System.out.println("Testing");
		System.out.println("Testing");

		// Soft assertion
		SoftAssert sa = new SoftAssert(); // If this statement fails here, it will execute further lines too.
		sa.assertEquals(1, 2);

		System.out.println("Testing");
		System.out.println("Testing");
		
		sa.assertAll(); // This will fail the test if any soft assertions failed (Mandatory)
	}
}














